long :: [Integer] -> Integer
long [] = 0
long (x:xs) = 1 + long xs

--ejercicio3
--funca todo, falta revisar si hay errores
equivalentes :: [Integer] ->[Integer] ->Bool  
equivalentes a b = elemb a (listarotaciones b (long b)) (long b) 
					  
						 
listarotaciones :: [Integer]-> Integer-> [[Integer]] --saca la lista de rotaciones
listarotaciones _ 0 = [[]]
listarotaciones (x:xs) a = [(x:xs)] ++ listarotaciones (xs ++ [x]) (a-1)

elemb :: [Integer] -> [[Integer]] -> Integer -> Bool  --igual a elem pero para listas
elemb _ _ 0 = False
elemb x (y:ys) c |  x == y = True
			   | otherwise = elemb x ys (c-1)
			   
--Ejercicio4			   
--funca todo, falta revisar si hay errores 
			

--Estas 2 lineas de abajo se agregan cuando unimos todo			
--eEquivalentes :: Integer ->Integer ->[[Integer]]
--eEquivalentes n k = listarotaciones2 (ejercicio 2 n k) n

listarotaciones2 :: [Integer]-> Integer-> [[Integer]]
listarotaciones2 _ 0 = [[]]
listarotaciones2 (x:xs) a | x==1 = [(x:xs)] ++ listarotaciones2 (xs ++ [x]) (a-1)
						  | otherwise = listarotaciones2 (xs ++ [x]) (a-1)
