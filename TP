-- funciones auxiliares

toma :: Integer -> [a] -> [a]
toma _ [] = []
toma 0 _ = []
toma a (x:xs) = x : toma (a-1) xs

deja :: Integer ->[a] -> [a] 
deja _ [] = []
deja 0 xs = xs
deja a (x:xs) = (deja (a-1) xs)

n :: Integer -> Integer -> [[Integer]]
n a 0 = []
n a k = [a]:(n a (k-1))

intercalar :: [[Integer]] -> [[Integer]] -> [[Integer]]
intercalar [] l = l
intercalar l [] = l
intercalar (x:xs) (y:ys) = (x++y):(intercalar xs ys)

rotar :: [Integer] -> [Integer]
rotar (x:xs) = last (x:xs) : init (x:xs)

listaRotac :: [Integer] -> [[Integer]]
listaRotac (x:xs) = toma (long (x:xs))((x:xs) : (listaRotac (rotar (x:xs))))

contar1 :: [Integer] -> Integer
contar1 a = sum [x | x <- a, x==1]

concatenar :: [[Integer]] -> [Integer]
concatenar (x:xs) = [j | k <- (x:xs), j <- k]

algoritmo :: [[Integer]] -> [[Integer]] -> [[Integer]]
algoritmo (z:zs) [] = (z:zs)
algoritmo (x:xs) (y:ys)
                       | l1 > l2 = algoritmo (toma l2 base) (deja l2 base)
                       | l2 > l1 = algoritmo (toma l1 base) (deja l1 base)
                       | l1 == l2 = base

  where base = intercalar (x:xs) (y:ys)
        l1 = long (x:xs)
        l2 = long (y:ys)

-- ejercicio 1

long :: [a] -> Integer
long [] = 0
long (x:xs) = sum [1| x <- (x:xs)]

-- ejercicio 2

e :: Integer -> Integer -> [Integer]
e m k | m < k = error "el primer parÃ¡metro debe ser mayor que el segundo"
      | otherwise = concatenar (algoritmo (n 1 k) (n 0 (m-k)))

-- ejercicio 3

equivalentes :: [Integer] ->[Integer] ->Bool
equivalentes a b = a `elem` listaRotac b

-- ejercicio 4

eEquivalentes :: Integer ->Integer ->[[Integer]]
eEquivalentes n k = [x | x <- (listaRotac (e n k)), head x == 1]

-- ejercicio 5

nkEquivalente :: [Integer] -> Bool
nkEquivalente a = elem a (listaRotac (e m k))

			where k = contar1 a
      			m = long a
