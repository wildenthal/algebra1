--todo nuevo
deja :: Integer ->[a] -> [a] 
deja _ [] = []
deja 0 xs = xs
deja a (x:xs) = (deja (a-1) xs)

tomar :: Integer -> [a] -> [a]
tomar _ [] = []
tomar 0 _ = []
tomar a (x:xs) = x : tomar (a-1) xs
 --ejercicio1

long :: [a] -> Integer
long [] = 0
long (x:xs) = 1 + long xs


--ejercicio2

--para el caso donde ejercicio2 a a
unos :: Integer -> [Integer]
unos 0 = []
unos a = 1:unos (a-1)


n :: Integer -> Integer -> [[Integer]]
n a 1 = [[a]]
n a k = [a]:(n a (k-1))
-- Esto hace una lista tipo: n 1 4 -> [[1],[1],[1],[1]]
intercalar :: [[Integer]] -> [[Integer]] -> [[Integer]]
intercalar [] l = l
intercalar l [] = l
intercalar (x:xs) (y:ys) = (x++y):(intercalar xs ys)
-- Funcion intercalar basica de matias modificada para que no trunque nÃºmeros
algoritmo :: [[Integer]] -> [[Integer]] -> [[Integer]]
algoritmo (z:zs) (c:[]) = (z++c):zs
algoritmo (x:xs) (y:ys)
                       | l1 > l2 = algoritmo (tomar l2 base) (deja l2 base)
                       | l2 > l1 = algoritmo (tomar l1 base) (deja l1 base)
                       | l1 == l2 = base
  
  where base = intercalar (x:xs) (y:ys)
        l1 = long (x:xs)
        l2 = long (y:ys)


-- Algoritmo basico
concatenar :: [[Integer]] -> [Integer]
concatenar (c:[]) = c
concatenar (x:xs) = x ++ concatenar xs
-- Lo convierte todo en una unica lista

ejercicio2 :: Integer -> Integer -> [Integer]
ejercicio2 m k | k==m = unos m
               | otherwise =concatenar(algoritmo (n 1 k) (n 0 (m-k)))



--ejercicio3
--funca todo, falta revisar si hay errores
--dice si dos listas son equivalentes 
equivalentes :: [Integer] ->[Integer] ->Bool
equivalentes a b = elemb a (listarotaciones b (long b)) (long b)

listarotaciones :: [Integer]-> Integer-> [[Integer]] --saca la lista de rotaciones
listarotaciones _ 0 = [[]]
listarotaciones (x:xs) a = [(x:xs)] ++ listarotaciones (xs ++ [x]) (a-1)

elemb :: [Integer] -> [[Integer]] -> Integer -> Bool --igual a elem pero para listas
elemb _ _ 0 = False
elemb x (y:ys) c | x == y = True
                 | otherwise = elemb x ys (c-1)

 --funca todo hasta aca

--ejercicio4

eEquivalentes :: Integer ->Integer ->[[Integer]]
eEquivalentes n k = listarotaciones2 (ejercicio2 n k) n

listarotaciones2 :: [Integer]-> Integer-> [[Integer]]
listarotaciones2 _ 0 = []
listarotaciones2 (x:xs) a | x==1 = [(x:xs)] ++ listarotaciones2 (xs ++ [x]) (a-1)
                          | otherwise = listarotaciones2 (xs ++ [x]) (a-1)

--ejercicio5

nkEquivalente :: [Integer] ->Bool
nkEquivalente a = elemb a (listarotaciones (ejercicio2 (long a) (contar a)) (long a)) (long a)


contar :: [Integer] -> Integer --contar unos
contar [] = 0
contar (x:xs) | x==1 =1 + contar xs
              | otherwise= contar xs
                  

                  
 {-
 probamos en el 1:
 
 *Main> long [1,1,1,1]
  4
 
 probamos en el 2:
 
 ejercicio2 10 3
 *Main> ejercicio2 10 3
[1,0,0,0,1,0,0,1,0,0]

*Main> ejercicio2 29 28
[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

 probamos en el 3:
eqequivalentes [1,1,0] [0,1,1]
True

probamos en el 4:

*Main> eEquivalentes  10 3
[[1,0,0,0,1,0,0,1,0,0],[1,0,0,1,0,0,1,0,0,0],[1,0,0,1,0,0,0,1,0,0]]

probamos en el 5:

*Main> nkEquivalente [1,0,1,0]
True
-}
 
