-- FUNCIONES AUXILIARES

toma :: Integer -> [a] -> [a]
toma _ [] = []
toma 0 _ = []
toma a (x:xs) = x : toma (a-1) xs

deja :: Integer ->[a] -> [a] 
deja _ [] = []
deja 0 xs = xs
deja a (x:xs) = deja (a-1) xs

n :: Integer -> Integer -> [[Integer]]
n a 0 = []
n a k = [a]:(n a (k-1))

intercalar :: [[Integer]] -> [[Integer]] -> [[Integer]]
intercalar [] l = l
intercalar l [] = l
intercalar (x:xs) (y:ys) = (x++y):(intercalar xs ys)

rotar :: [Integer] -> [Integer]
rotar a = last a : init a

listaRotac :: [Integer] -> [[Integer]]
listaRotac a = toma (long a) (a : (listaRotac (rotar a)))

listaRotac1 :: [Integer] -> Integer -> [[Integer]]
listaRotac1 _ 0 = []
listaRotac1 a n | (head a) == 1 = a : (listaRotac1 (rotar a) (n-1))
            		| otherwise = listaRotac1 (rotar a) (n-1)

contar :: [Integer] -> Integer
contar [] = 0
contar (x:xs) | x == 1 = 1 + contar xs
              | otherwise = contar xs

concatenar :: [[Integer]] -> [Integer]
concatenar (c:[]) = c
concatenar (x:xs) = x ++ concatenar xs

algoritmo :: [[Integer]] -> [[Integer]] -> [[Integer]]
algoritmo (z:zs) [] = (z:zs)
algoritmo (x:xs) (y:ys)
                       | l1 > l2 = algoritmo (toma l2 base) (deja l2 base)
                       | l2 > l1 = algoritmo (toma l1 base) (deja l1 base)
                       | l1 == l2 = base

  where base = intercalar (x:xs) (y:ys)
        l1 = long (x:xs)
        l2 = long (y:ys)

-- En caso de que no se pueda usar ´elem´ en los ejercicios 3 y 5, cambiarla por "elem1":

elem1 :: (Eq a) => a -> [a] -> Bool
elem1 x [] = False
elem1 x y | x == (head y) = True
          | otherwise = elem x (tail y)

-- EJERCICIO 1

long :: [a] -> Integer
long [] = 0
long (x:xs) = 1 + long xs

-- EJERCICIO 2

e :: Integer -> Integer -> [Integer]
e m k = concatenar (algoritmo (n 1 k) (n 0 (m-k)))

-- EJERCICIO 3

equivalentes :: [Integer] ->[Integer] ->Bool
equivalentes a b = a `elem` listaRotac b

-- EJERCICIO 4

eEquivalentes :: Integer ->Integer ->[[Integer]]
eEquivalentes n k = listaRotac1 (e n k) n

-- EJERCICIO 5

nkEquivalente :: [Integer] -> Bool
nkEquivalente a = a `elem` (listaRotac (e m k))

			where k = contar a
			      m = long a

-- EJEMPLOS:

-- EJERCICIO 1

-- *Main> long []
-- 0
-- *Main> long [[1],[1,2],[2],[]]
-- 4
-- *Main> long [1,2,3,4,5,6,7]
-- 7

-- EJERCICIO 2

-- *Main> e 9 5
-- [1,0,1,1,0,1,0,1,0]
-- *Main> e 4 4
-- [1,1,1,1]

-- EJERCICIO 3

-- *Main> equivalentes [1,1,0,0,1,0] [1,0,0,1,0,1]
-- True
-- *Main> equivalentes [1,1,0,0,1,0] [0,0,1,0,1,1]
-- True
-- *Main> equivalentes [1,1,0,0,1,0] [0,0,1,0,1,0]
-- False

-- EJERCICIO 4

-- *Main> eEquivalentes 4 3
-- [[1,0,1,1],[1,1,0,1],[1,1,1,0]
-- *Main> eEquivalentes 5 2
-- [[1,0,0,1,0],[1,0,1,0,0]]
-- *Main> eEquivalentes 7 4
-- [[1,0,1,1,0,1,0],[1,0,1,0,1,1,0],[1,0,1,0,1,0,1],[1,1,0,1,0,1,0]]

-- EJERCICIO 5

-- *Main> nkEquivalente [1,0,1,1,0,1,0]
-- True
-- *Main> nkEquivalente [1,0,1,1]
-- True
-- *Main> nkEquivalente [1,0,1,0,0]
-- True
-- *Main> nkEquivalente [1,0,1,0,0,1]
-- False
-- *Main> nkEquivalente [1,0,1,1,0,0,1]
-- False
